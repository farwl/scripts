# ------------------------------

# Action Broadcaster

# Created by farwl

# Version 1.0

# ------------------------------

Options:

# DO NOT EDIT LINES BELOW

	version: 1.0

# DO NOT EDIT LINES ABOVE

# CONFIG

	# theme colors

	primary: <##3B82F6>
	secondary: <##9CA3AF>
	warning: <##FBBF24>
	danger: <##EF4444>
	info: <##34D399>

	# no permission message

	np: <##EF4444>[!] Insufficient Permissions!

	# prefixes

	c: <##FBBF24>[!]
	d: <##EF4444>[!]
	s: <##34D399>[✔]

	# help command

	helpCommandsPerPage: 5 # How many commands should be displayed per page in /help

	# periodical broadcasts

	broadcastInterval: 60 # Interval between periodic broadasts, in seconds
	intervalBroadcastsPerPage: 5 # How many interval broadcast records should be displayed per page in /ab list

	# action bar health

	enabled: true # When attacking players and mobs, should their health be displayed in the action bar?

	# health symbols

	full: &c❤ # full heart
	empty: &7❤ # empty heart

# CONFIG

# Functions

function healthDisplay(e: living entity) :: string:

	set {_health} to floor(health of {_e})
	set {_maxHealth} to maximum health of {_e}

	loop {_maxHealth} times:

		add 1 to {_n}

		{_n} <= {_health}: # do they have this heart

			add "{@full}" to {_string::*}

		else: # empty / lost heart

			add "{@empty}" to {_string::*}

	set {_final} to join {_string::*}
	set {_e} to propercase "%{_e}%"
	return "{@secondary}%propercase {_e}% %{_final}%"

function sendBroadcast(p: players, m: string, t: integer=1):

	set {_time} to ("%{_t}% seconds" parsed as timespan) # timespan

	set {_expire} to unix timestamp of ({_time} later)

	while (unix timestamp of now) < {_expire}: # duration

		send action bar "%{_m}%" to {_p::*}
		wait 1 second # prevent looping every single tick

function savedBroadcastExists(i: integer) :: boolean:

	return true if {savedBroadcasts::%{_i}%} is set

function savedBroadcast(i: integer) :: string:

	return {savedBroadcasts::%{_i}%}

function isOnline(p: player) :: boolean:

	loop all players:

		"%loop-value%" = "%{_p}%"
		return true

function printBroadcastList(p: player, i: integer=1):

	send "" to {_p}
	send "{@primary}&lPeriodical Broadcasts" to {_p}
	send "" to {_p}

	loop {savedBroadcasts::*}: # gets saved broadcasts

		delete {_cut::*}, {_string::*}, {_msg} and {_id}

		(loop-index parsed as integer) > ({_i} - 1) * {@intervalBroadcastsPerPage}:
			(loop-index parsed as integer) < ({_i} * {@intervalBroadcastsPerPage}) + 1:

				set {_cut::*} to split uncolored loop-value-1 at ""
				loop {_cut::*}:

					loop-index-2 parsed as integer < 21
					add "{@secondary}%uncolored loop-value-2%" to {_string::*}

				set {_msg} to join {_string::*}
				set {_id} to loop-index parsed as integer

				length of loop-value-1 < 21:

					send formatted "{@secondary}• {@primary}##%{_id}% {@secondary}- %{_msg}%{@secondary}" to {_p}

				else:

					send formatted "{@secondary}• {@primary}##%{_id}% {@secondary}- %{_msg}%{@secondary}..." to {_p}

	# page controls

	{_i} > 1:

		set {_prev} to "<tooltip:{@secondary}Click to page back><command:/ab list %{_i} - 1%>{@primary}[ Back ] <reset>"

	size of {savedBroadcasts::*} > ({_i} * {@intervalBroadcastsPerPage}):

		set {_next} to " <tooltip:{@secondary}Click to page forward><command:/ab list %{_i} + 1%>{@primary}[ Next ]<reset>"

	# calc max pages

	size of {savedBroadcasts::*} >= {@intervalBroadcastsPerPage}:

		set {_maxPages} to ceil(size of {savedBroadcasts::*} / {@intervalBroadcastsPerPage})

	else if size of {savedBroadcasts::*} < {@intervalBroadcastsPerPage}:

		set {_maxPages} to 1

	# page display

	send "" to {_p}

	send formatted "%{_prev} ? """"%{@secondary}( Page %{_i}%/%{_maxPages}% )%{_next} ? """"%" to {_p}

	send "" to {_p}

function printHelpMessage(p: player, i: integer):

	send "" to {_p}
	send "{@primary}&lAction Broadcaster Help" to {_p}
	send "" to {_p}

	loop {helpCommands::*}: # gets commands / aliases, permissions, descriptions

		(loop-index parsed as integer) > ({_i} - 1) * {@helpCommandsPerPage}:
			(loop-index parsed as integer) < ({_i} * {@helpCommandsPerPage}) + 1:

				set {_s::*} to split loop-value at "//"

				set {_cmd} to {_s::1} # command name
				set {_desc} to {_s::2} ? "{@danger}[ Error ]" # description
				set {_perm} to {_s::3} ? "{@danger}[ Error ]" # permission node

				send formatted "{@secondary}• {@primary}<tooltip:{@secondary}Requires {@warning}%{_perm}%>/%{_cmd}%<reset> {@secondary}- %{_desc}%" to {_p}

	send "" to {_p}

	# page controls

	{_i} > 1:

		set {_prev} to "<tooltip:{@secondary}Click to page back><command:/ab help %{_i} - 1%>{@primary}[ Back ] <reset>"

	size of {helpCommands::*} > ({_i} * {@helpCommandsPerPage}):

		set {_next} to " <tooltip:{@secondary}Click to page forward><command:/ab help %{_i} + 1%>{@primary}[ Next ]<reset>"

	# calc max pages

	size of {helpCommands::*} >= {@helpCommandsPerPage}:

		set {_maxPages} to ceil(size of {helpCommands::*} / {@helpCommandsPerPage})

	else if size of {helpCommands::*} < {@helpCommandsPerPage}:

		set {_maxPages} to 1

	# page display

	send "{@secondary}┏ Hover over commands%nl%{@secondary}┗ to see permission." to {_p}
	send "" to {_p}

	send formatted "%{_prev} ? """"%{@secondary}( Page %{_i}%/%{_maxPages}% )%{_next} ? """"%" to {_p}

	send "" to {_p}

# Events

damage of living entity:

	{@enabled} = true

	send action bar healthDisplay(victim) to attacker

load:

	# rebuild help contents on script load

	delete {helpCommands::*}

	add "ab help//Display all plugin commands.//ab.help" to {helpCommands::*}
	add "ab send//Send a player an actionbar messsage.//ab.send" to {helpCommands::*}
	add "ab announce//Send all players an actionbar message.//ab.announce" to {helpCommands::*}
	add "ab reload//Reload the plugin and config.//ab.reload" to {helpCommands::*}
	add "ab start//Start periodical broadcasts.//ab.start" to {helpCommands::*}
	add "ab stop//Stop periodical broadcasts.//ab.stop" to {helpCommands::*}
	add "ab add//Add a periodical broadcast.//ab.add" to {helpCommands::*}
	add "ab remove//Remove a periodical broadcast.//ab.remove" to {helpCommands::*}

	# rebuild while loops

	delete {while::*}

	# interval broadcasts

	size of {savedBroadcasts::*} > 0 # do any interval broadcasts exist

	{intervalBroadcasts} = true # enabled check

	set {_code} to a random number between 10000000 and 90000000 # while code
	add {_code} to {while::*} # enable while code

	while {while::*} contains {_code}:

		size of {savedBroadcasts::*} > 0 # do any interval broadcasts exist

		loop {savedBroadcasts::*}:

			sendBroadcast(all players, "%loop-value%")

			set {_wait} to "{@broadcastInterval} seconds" parsed as timespan
			wait {_wait}

# Commands

command ab [<text>] [<text>]:
	
	aliases: ab:ab
	usage: <##EF4444>/help [page]
	description: Main Action Broadcaster command.
	trigger:

		arg-1 is set:

			set {_a::*} to split arg-2 at " "

			arg-1 = "help":

				player has permission "ab.help":

					set {_maxPages} to ceil(size of {helpCommands::*} / {@helpCommandsPerPage})

					({_a::1} parsed as integer) > {_maxPages}:

						send "{@danger}[!] Invalid page."

					else:

						set {_pg} to ({_a::1} parsed as integer) ? 1
						printHelpMessage(player, {_pg})

				else:

					send "{@np}"

			else if arg-1 = "send":

				player has permission "ab.send":

					{_a::1}, {_a::2}, and {_a::3} are set:

						set {_player} to {_a::1} parsed as player # player to send to

						set {_time} to {_a::2} parsed as number # time in seconds

						loop {_a::*}: # get remaining parts of string

							loop-index parsed as integer >= 4 # first 3 args are part of command, 4th one is first word of message
							add " %loop-value%" to {_join::*}
						
						set {_msg} to colored (join {_a::3} and {_join::*}) # not using index

						savedBroadcastExists({_a::3} parsed as integer) = true: # check if the saved broadcast exists
							set {_msg} to savedBroadcast({_a::3}) if {_a::3} is an integer # sending saved broadcasts with index

						isOnline({_player}) = true:

							{_time} > 0: # valid timespan

								sendBroadcast({_player}, {_msg}, {_time})
								send "{@s} Sent broadcast to %{_player}%{@info}."

							else:

								send "{@d} Input must be a number greater than zero."

						else:

							send "{@d} That player is not online."
					else:

						send "{@c} /ab send <player> <display time in seconds> <index/message>"

				else:

					send "{@np}"

			else if arg-1 = "announce" or "broadcast":

				player has permission "ab.announce":

					{_a::1} and {_a::2} are set:

						set {_time} to {_a::1} parsed as number # time in seconds

						loop {_a::*}: # get remaining parts of string

							loop-index parsed as integer >= 3 # first 2 args are part of command, 3rd one is first word of message
							add " %loop-value%" to {_join::*}
						
						set {_msg} to colored (join {_a::2} and {_join::*}) # not using index

						savedBroadcastExists({_a::2} parsed as integer) = true: # check if the saved broadcast exists
							set {_msg} to savedBroadcast({_a::2}) if {_a::2} is an integer # sending saved broadcasts with index

						{_time} > 0: # valid timespan

							sendBroadcast(all players, {_msg}, {_time})
							send "{@s} Sent broadcast to all players{@info}."

						else:

							send "{@d} Input must be a number greater than zero."

					else:

						send "{@c} /ab send <player> <display time in seconds> <index/message>"

				else:

					send "{@np}"				

			else if arg-1 = "reload":

				player has permission "ab.reload":

					send "{@c} Reloading Action Broadcaster..."
					reload script script
					send "{@s} Reloaded Action Bar {@version}{@info}."

				else:

					send "{@np}"
			
			else if arg-1 = "start":

				player has permission "ab.start":

					{intervalBroadcasts} = true:

						send "{@d} Periodical broadcasts are already enabled."

					else:

						send "{@c} Starting periodical broadcasts..."

						set {intervalBroadcasts} to true # change status

						reload script script # reload script for while loop to take effect

						send "{@s} Started periodical broadcasts."

				else:

					send "{@np}"

			else if arg-1 = "stop":

				player has permission "ab.stop":

					{intervalBroadcasts} = true:

						send "{@c} Stopping periodical broadcasts..."

						set {intervalBroadcasts} to false # change status

						reload script script # reload script for while loop to take effect

						send "{@s} Stopped periodical broadcasts."

					else:

						send "{@d} Periodical broadcasts are already disabled."

				else:

					send "{@np}"

			else if arg-1 = "add":

				player has permission "ab.add":

					{_a::1} is set:

						loop {_a::*}: # get remaining parts of string

							loop-index parsed as integer >= 2 # first arg is part of command, 2nd one is first word of message
							add " %loop-value%" to {_join::*}
						
						set {_msg} to colored (join {_a::1} and {_join::*}) # not using index

						send "{@c} Adding message..."

						add {_msg} to {savedBroadcasts::*}
						reload script script

						send "{@s} Added message to periodical broadcasts."

					else:

						send "{@c} /ab add <message>"

				else:

					send "{@np}"

			else if arg-1 = "remove":

				player has permission "ab.remove":

					{_a::1} is set:

						({_a::1} parsed as integer) > 0:

							set {_int} to {_a::1} parsed as integer
							{savedBroadcasts::%{_a::1}%} is set:

								send "{@c} Removing message..."

								clear {savedBroadcasts::%{_a::1}%}
								reload script script

								send "{@s} Removed message from periodical broadcasts."

							else:

								send "{@d} Invalid index. Type /ab list."

						else:

							send "{@d} Invalid index. Type /ab list."

					else:

						send "{@c} /ab remove <message>"			

				else:

					send "{@np}"

			else if arg-1 = "list":

				player has permission "ab.list":

					set {_maxPages} to ceil(size of {savedBroadcasts::*} / {@intervalBroadcastsPerPage})

					({_a::1} parsed as integer) > {_maxPages}:

						send "{@danger}[!] Invalid page."

					else:

						set {_pg} to ({_a::1} parsed as integer) ? 1
						printBroadcastList(player, {_pg})

				else:

					send "{@np}"				

			else:

				send "{@c} /ab <help> [page]"

		else:

			send "{@c} /ab <help> [page]"
